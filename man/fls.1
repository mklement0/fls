.TH "FLS" "1" "July 2018" "v0.3.2" ""
.SH "NAME"
\fBfls\fR \- type\-filtering wrapper around ls
.SH SYNOPSIS
.P
A type\-filtering wrapper around the standard \fBls\fP utility\.
.P
.RS 2
.nf
fls [<filter>] [<options\-for\-ls>] [<dir>]
fls [<filter>] [<options\-for\-ls>] <fileOrDir>\.\.\.
.fi
.RE
.P
\fB<filter>\fP is a string of filter characters; commonly used are:
.P
.RS 2
.nf
f       file or symlink to file
d       dir or symlink to dir
l       symlink
x       executable file / searchable dir\. (by you)
e       empty file (zero bytes) or empty dir\. (no files or subdirs\.)
.fi
.RE
.P
Filters are combined with logical AND, and filters placed after \fB^\fP are negated\.
.br
E\.g\., \fBfls fx^l\fP lists executable files that aren't symlinks\.
.P
Standard options: \fB\-\-help\fP, \fB\-\-man\fP, \fB\-\-version\fP, \fB\-\-home\fP
.SH DESCRIPTION
.P
\fBfls\fP is a wrapper around the \fBls\fP utility that enables listing filesystem
.br
items filtered by type and certain attributes\.
.P
NOTE: For simplicity, this utility is limited to filtering items from a
.br
\fIsingle\fR directory:
.RS 0
.IP \(bu 2
Either: by specifying a single directory (the current one by default)
.br
whose \fIcontent\fR to filter\.
.IP \(bu 2
Or: as the result of globbing on the command line, by specifying multiple
.br
items all from the same parent directory to filter \fIthemselves\fR\|\.
.br
Unlike with \fBls\fP, matching items are always printed by filename only, with
.br
the path component, if any, removed\.

.RE
.P
To allow use of a single utility in both filtering and non\-filtering
.br
scenarios, specifying a filter is optional and not specifying one makes
.br
\fBfls\fP behave like \fBls\fP, within the constraints noted\.
.P
For convenience and to facilitate definition of aliases, the filter may be
.br
placed before or after the options to pass to \fBls\fP, if any\.
.br
A first operand that is not a valid filter is considered a file operand
.br
instead\. If what you intended as a filter is treated as a (non\-existent)
.br
file instead, the implicication is that the filter is invalid; to see the
.br
specific reason, specify the filter unambiguously, by:
.RS 0
.IP \(bu 2
either: placing it before options; e\.g\.: \fBfls d \-l [\.\.\.]\fP  
.IP \(bu 2
or: following it with \fB\-\-\fP; e\.g\.: \fBfls \-l d \-\- [\.\.\.]\fP  

.RE
.P
Conversely, to explicitly request unfiltered output, use \fB\-\-\fP
.br
as the first operand; e\.g\.: \fBfls \-\- [\.\.\.]\fP  
.P
The exit code is 0, as long as all file operands exist and can be examined\.
.br
Thus, a filter that matches nothing simply produces no output, without
.br
indicating an error condition\.
.SH OPTIONS AND OPERANDS
.RS 0
.IP \(bu 2
\fB<options\-for\-ls>\fP
.br
Options to pass through to \fBls\fP, such as \fB\-l\fP to list in long format;
.br
see \fBman ls\fP\|\.
.IP \(bu 2
\fB<dir>\fP
.br
A single directory whose items (files and subdirectories) to filter;
.br
defaults to \fB\|\.\fP (the current directory)\.
.IP \(bu 2
\fB<fileOrDir>\.\.\.\fP
.br
A list of files and/or subdirectories from a \fIsingle\fR parent directory
.br
to which to apply filtering \fIdirectly\fR\|\.
.br
Typically, this list will come from pathname expansion (globbing) on the
.br
command line\.
.br
Note that, unlike with \fBls\fP, option \fB\-d\fP is implictly in effect for
.br
multiple operands; that is, (sub)directories among the operands are always
.br
filtered and printed as themselves, and their content is neither examined
.br
nor printed\.
.br
CAVEAT: If a glob happens to expand to a \fIsingle directory\fR, this utility
.br
will instead target that directory's \fIcontent\fR, as if a single directory
.br
had been explicitly specified \- it cannot tell the difference\.
.br
When in doubt, use \fB\-d\fP explicitly\.
.IP \(bu 2
\fB<filter>\fP
.br
A filter expression to apply to the set of input files an subdirs so that
.br
only items matching the filter are output\.
.br
A filter expression is composed of a string of one or more filters, each
.br
of which is represented by a single character detailed in the next chapter\.
.br
AND logic is implicitly applied to multiple filters; i\.e\., matching items
.br
must meet ALL criteria\.
.br
A \fB^\fP preceding one or more filters negates their logic; only one \fB^\fP
.br
is allowed\.
.br
Specifying just \fB\-\-\fP explicitly indicates that \fIno\fR filtering should be
.br
performed at all\.

.RE
.SH FILTERS
.P
Individual filters are characters that are a subset of the type\-identifying
.br
chars\. accepted by \fBfind\fP\|'s \fB\-type\fP primary and Bash's file\-test
.br
operators, with some custom modifications and extensions, where noted\.
.P
Note that with the exception of \fBl\fP, all tests are applied to the targets of
.br
symlinks, not the symlinks themselves\.
.SS TYPE Filters
.RS 0
.IP \(bu 2
\fBf\fP matches a regular file\.
.IP \(bu 2
\fBd\fP matches a directory\.
.IP \(bu 2
\fBl\fP matches a symlink; add \fBf\fP or \fBd\fP to distinguish between symlinks to
.br
files and those to directories; see the TIPS chapter for how to find
.br
broken symlinks\.
.br
NOTE: The equivalent Bash operators are \fBL\fP or \fBh\fP, which are also
.br
accepted\.
.IP \(bu 2
\fBb\fP, \fBc\fP, \fBp\fP, \fBs\fP match a block special file, character special file,
.br
a named pipe (FIFO), and a socket, respectively\.
.br
NOTE: Bash uses \fBS\fP to test for a socket, and \fBs\fP to test for nonempty
.br
files; this utility instead uses \fBe\fP to test for emptiness \- see below\.
.br
\fBS\fP is, however, also accepted by this utility to test for sockets\.

.RE
.SS ATTRIBUTE Filters
.RS 0
.IP \(bu 2
\fBx\fP matches a file that the current user can execute or a directory that
.br
the current user can search; add \fBf\fP or \fBd\fP to distinguish\.
.IP \(bu 2
\fBe\fP matches an empty file (zero bytes) or empty directory; add \fBf\fP or \fBd\fP
.br
to distinguish\. A directory is only considered empty if it truly contains
.br
no items, whether hidden or not\.
.br
NOTE: Bash offers operator \fB\-s\fP, which uses opposite semantics (test for
.br
non\-emptiness) and applies to files only; using \fBs\fP that way is NOT
.br
supported by this utility, because it clashes with using \fBs\fP to test for
.br
a socket, but you can use \fBf^e\fP to emulate it\.
.IP \(bu 2
\fBr\fP, \fBw\fP matches a file or directory that the current user can read / write\.

.RE
.P
The following, less common Bash filters are supported as well:
.RS 0
.IP \(bu 2
\fBu\fP matches if the item's set\-user\-id permissions bit is set\.
.IP \(bu 2
\fBg\fP matches if the item's set\-group\-id permissions bit is set\.
.IP \(bu 2
\fBk\fP matches if the item's sticky permissions bit is set\.
.IP \(bu 2
\fBG\fP matches if the item is owned by the effective group ID\.
.IP \(bu 2
\fBN\fP matches if the item has been modified since it was last read\.
.IP \(bu 2
\fBO\fP matches if the item is owned by the effective user ID\.

.RE
.SH TIPS
.P
To include hidden items in the set of items to filter, use \fBls\fP\|'s \fB\-A\fP option;
.br
e\.g\.:
.P
.RS 2
.nf
fls d \-A  # list all subdirs\., including hidden ones
.fi
.RE
.P
To filter among hidden files or directories only, use glob \fB\|\.*\fP \- this will
.br
return only the hidden items; e\.g\.:
.P
.RS 2
.nf
fls f \.*  # show hidden files
fls d \.*  # show hidden subdirs\.
.fi
.RE
.P
To find broken (dangling) symlinks, use:
.P
.RS 2
.nf
fls l^fdbcps
.fi
.RE
.P
Since remembering filter characters can be a challenge, you can define
.br
aliases; e\.g\.:
.P
.RS 2
.nf
alias lsd='fls d'     # list directories
alias lsexe='fls xf'  # list executables
alias lsln='fls L'    # list symlinks
.fi
.RE
.P
The following alias wraps \fBfls\fP with a set of useful \fBls\fP options, such as
.br
including hidden items and using human\-friendly file sizes:
.P
.RS 2
.nf
alias lsx='fls \-FAhl' # fls with useful ls options baked in
.fi
.RE
.SH LICENSE
.P
For license information and more, visit the home page by running
.br
\fBfls \-\-home\fP\|\.
.SH EXAMPLES
.P
.RS 2
.nf
  # List all files in the current dir\.
fls f

  # List all files in the current dir in long format, including hidden ones\.
fls f \-lA

  # List all hidden files in the current dir\.
fls f \.*

  # List all subdirs\. of /    
fls d /

  # List all symlinks to files in the current dir\.
fls lf

  # List all executable files matching c* in /usr/local/bin
fls xf /usr/local/bin/c*

  # List all empty (zero bytes) files in the current dir\.
fls fe

  # List all empty subdirs\. in the current dir\.
fls de

  # Find broken symlinks in the current dir\.
fls l^fdbcps

  # Use without filters\.
fls         # same as ls
fls \-lt ~   # same as ls \-lt ~
fls \-\- pg   # same as ls pg, \-\- unambiguously marks pg as file operand
.fi
.RE

